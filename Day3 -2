인스턴스와 참조변수
1. 인스턴스와 힙 메모리

생성된 객체에 필요한 메모리 -> 힙메모리

클래스 자료형 : 주소값 참조해서 접근
-> 참조 자료형

s1 -> 참조변수

== : 주소 비교

참조변수와 객체의 연결이 끊기면 
-> Garbage Collector(메모리 청소부) 
-> 안쓰는 객체 메모리 해제

생성자 메서드

- 객체를 생성해주는 기능
- 반환 타입을 정의x
- 반환값은 객체의 주소로 고정
- 부가적으로 객체 생성 이후 작업
  주로하는 작업이 생성된 객체의 멤버 변수의 초기화

1. 디폴트생성자

- 클래스에 정의된 생성자가 메서드가 x
- 컴파일러가 자동 추가
	public 클래스명(){}

2. 생성자 만들기


3. 생성자 오버로드

- 동일한 생성자명으로 여러개 정의


메서드의 시그니쳐
반환자료형 + 함수명 + 매개변수


데이터 영역 메모리
클래스 로더 -> 클래스 -> 데이터 영역 구조화

정보은닉
1. 접근제어자

public - 클래스 내부 외부, 타 패키지 상관없이 접근

protected - default + 상속(private)

- 동일 패키지 안에서 클래스 내부 외부 접근 가능
- 타 패키지에서는 상속을 통해서 클래스 내부에서만 접근가능(private)

default(접근 제어자를 정의 X)

- 동일 패키지 안에서만 클래스 내부 외부 접근 가능

private(가장 좁은 접근 범위)

- 클래스 내부에서만 접근 가능

타 패키지의 클래스 사용
import 패키지명.클래스명;

2. get(), set() 메서드

멤버 변수는 변수로써 값이 대입
(값의 검증이 불가)
- 멤버 변수는 외부에서 값 대입 X (private)
- 외부 접근 -> 별도의 메서드

this 예약어

지역변수
- 모든 메서드의 지역변수 중 하나
- 객체(인스턴스)의 주소값
- 클래스 내부에서 생성된 객체를 참조하는 지역변수

생성자 메서드
this()
this(값, ...)
- 클래스 내부에서 생성자 메서드를 호출
 
static 변수

static - 정적인 메모리

정적인 메모리

동적인 메모리
스택 영역 -> 지역변수
힙 영역 -> 멤버변수

클래스명으로 바로 접근할 수 있는 변수

- 클래스변수

정적 메서드
(static)

변수의 유효범위

인스턴스 변수 : 힙 메모리
- 객체가 생성되면 공간을 할당받는 변수
- 참조가 끊기면 garbage collector가 해제

지역변수 : 스택 메모리
- 함수가 호출되면 공간을 할당받는 변수
- 함수가 실행을 종료 -> 공간을 해제

정적 변수 : 데이터 영역
- 클래스 로더 -> 클래스 구조 -> 공간 할당
- 정적인 방법으로 변수 접근
- 클래스며응로 접근 -> 클래스 변수

상수 : 변하지 않는 수
-> 데이터 영역

리터럴 상수
